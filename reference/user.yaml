swagger: '2.0'
info:
  title: user
  version: '1.0'
host: 'localhost:3000'
schemes:
  - http
produces:
  - application/json
consumes:
  - application/json
paths:
  /users:
    get:
      summary: get user list
      tags:
        - user
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
      operationId: get-users
      parameters: []
    post:
      summary: create user
      tags:
        - user
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/User'
      operationId: post-users
  '/users/{userId}':
    parameters:
      - type: string
        name: userId
        in: path
        required: true
    get:
      summary: get user by id
      tags:
        - user
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/User'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      operationId: get-users-userId
    put:
      summary: update user
      tags:
        - user
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/User'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      operationId: put-users-userId
    delete:
      summary: delete user by id
      tags:
        - user
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/User'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Error'
      operationId: delete-users-userId
definitions:
  User:
    title: User
    type: object
    properties:
      id:
        type: integer
        description: Unique identifier for the given user.
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
        format: email
      dateOfBirth:
        type: string
        format: date
        example: '1997-10-31'
      emailVerified:
        type: boolean
        description: Set to true if the user's email has been verified.
      createDate:
        type: string
        format: date
        description: The date that the user was created.
      gender:
        type: string
        enum:
          - man
          - woman
    required:
      - id
      - firstName
      - lastName
      - email
      - emailVerified
  Error:
    title: Error
    type: object
    properties:
      message:
        type: string
